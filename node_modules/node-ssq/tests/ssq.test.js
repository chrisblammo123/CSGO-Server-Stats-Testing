var should = require('should');

// Module import
var ssq = require('../lib/ssq.js')
  , decoders = require('../lib/decoders.js');

var INFO_RESPONSE = [
  0xFF, 0xFF, 0xFF, 0xFF, 0x49, 0x02, 0x67, 0x61, 0x6D, 0x65, 0x32, 0x78,
  0x73, 0x2E, 0x63, 0x6F, 0x6D, 0x20, 0x43, 0x6F, 0x75, 0x6E, 0x74, 0x65,
  0x72, 0x2D, 0x53, 0x74, 0x72, 0x69, 0x6B, 0x65, 0x20, 0x53, 0x6F, 0x75,
  0x72, 0x63, 0x65, 0x20, 0x23, 0x31, 0x00, 0x64, 0x65, 0x5F, 0x64, 0x75,
  0x73, 0x74, 0x00, 0x63, 0x73, 0x74, 0x72, 0x69, 0x6B, 0x65, 0x00, 0x43,
  0x6F, 0x75, 0x6E, 0x74, 0x65, 0x72, 0x2D, 0x53, 0x74, 0x72, 0x69, 0x6B,
  0x65, 0x3A, 0x20, 0x53, 0x6F, 0x75, 0x72, 0x63, 0x65, 0x00, 0xF0, 0x00,
  0x05, 0x10, 0x04, 0x64, 0x6C, 0x00, 0x00, 0x31, 0x2E, 0x30, 0x2E, 0x30,
  0x2E, 0x32, 0x32, 0x00, 0xFF
];

describe('SSQ', function() {
  this.timeout(3 * ssq.DEFAULT_TIMEOUT);

  beforeEach(function () {
    ssq.set_timeout(ssq.DEFAULT_TIMEOUT);
  });

  describe('all requests', function() {
    it('should throw an error when given an invalid ip:port', function(done) {
      ssq.info('1.2.3.4', 1337, function (err) {
        if (err) {
          done();
        } else {
          throw new Error('Did not timeout');
        }
      });
    });

    it('should have a redifinable timeout', function(done) {
      var start_time;

      // SSQ timeout
      ssq.set_timeout(5000);

      // Mocha test timeout
      this.timeout(10000);

      start_time = (new Date()).getTime();
      ssq.info('1.2.3.4', 1337, function (err) {
        if (err) {
          var actual_timeout = (new Date()).getTime() - start_time;
          if (actual_timeout < 5000) {
            throw new Error('Timeout was too fast: ' + actual_timeout + 'ms');
          }

          done();
        } else {
          throw new Error('Did not timeout');
        }
      });

    });
  });
});
